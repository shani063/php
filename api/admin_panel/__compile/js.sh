#!/bin/bash

# Options:
# -u    Username

clear

usage() { echo "Usage: options.sh [-u <string>]" 1>&2; exit 1; }

source config.sh


# Create the tmp folder if it doesn't already exist
mkdir -p $path_to_js_temp

# Remove contents of compiled scripts directory.
# In case scripts are removed/things change around
rm "$path_to_js_compiled"/*

# Break our scripts_order.txt into an array that we can loop through
js_order=$(<__compile_order.txt)
js_array=($js_order)
cnt=${#js_array[@]}

# The queue is where we store minified filenames
# Once our running filesize_min total is near 25 kb we'll combine the files and
# clear the js_queue
js_queue=()
filesize_min_total=0
num_compilations=0

echo "Scripts ::"
for ((i=0;i<cnt;i++)); do
    echo "    ${js_array[i]}"

    js_array[i]="$path_to_js_source/${js_array[i]}"

    # The "stat" command doesn't work on my Windows machine.  
    # We'll have to settle on this for now
    filesize=$(du -b ${js_array[i]} | sed 's/\([0-9]*\)\(.*\)/\1/')     
    
    echo "        - $filesize bytes uncompressed"

    tmp_js="$path_to_js_temp/js$i.tmp"

    # Would like to do final compressions instead of compressing each component file.
    # That'll have to come later.
    java -jar "$path_to_closure_compiler"/compiler.jar --warning_level QUIET --compilation_level SIMPLE_OPTIMIZATIONS --js ${js_array[i]} --js_output_file "$tmp_js"

    tmp_js_filesize=$(du -b $tmp_js | sed 's/\([0-9]*\)\(.*\)/\1/') 

    echo "        - Compressed as js$i.tmp"
    echo "        - $tmp_js_filesize bytes compressed"

    # Compare size of queue to our desired chunk size
    # iPhones won't cache anything over 25k.  If you're
    # not worried about iPhones, adjust the chunk_size
    # however you feel appropriate.
    chunk_size=400000
    comparison_size=$(($filesize_min_total + $tmp_js_filesize))

    if (($comparison_size > $chunk_size)); then    
        if (($tmp_js_filesize > $chunk_size)); then
            # If this file itself is larger than the breakpoint, let's:
            #     1) Combine all previous files, clear the queue
            #     2) Rename this file, as it will be included all on its own
            
            # (1)
            tmp_js_string=${js_queue[*]}
            cat $tmp_js_string > "$path_to_js_compiled"/app.min.$num_compilations.js
            echo "        - Combined into app.min.$num_compilations.js [1] :: $tmp_js_string"
            num_compilations=$(expr $num_compilations + 1)
            unset js_queue
            filesize_min_total=0

            # (2)
            mv $tmp_js "$path_to_js_compiled"/app.min.$num_compilations.js
            echo "        - Combined into app.min.$num_compilations.js [2] :: $tmp_js"
            num_compilations=$(expr $num_compilations + 1)

        else
            # If this file isn't huge but it does push us past the breakpoint, let's
            # combine the files in the queue then create a new queue with this item
            # in it.
            tmp_js_string=${js_queue[*]}
            cat $tmp_js_string > "$path_to_js_compiled"/app.min.$num_compilations.js
            echo "        - Combined into app.min.$num_compilations.js [3] :: $tmp_js_string"
            num_compilations=$(expr $num_compilations + 1)

            unset js_queue
            js_queue+=($tmp_js)
            filesize_min_total=$tmp_js_filesize

            # If this is also the last loop, let's add this file
            last_loop=$(expr $cnt - 1)
            if (($i == $last_loop)); then
                tmp_js_string=${js_queue[*]}
                cat $tmp_js_string > "$path_to_js_compiled"/app.min.$num_compilations.js
                echo "        - Combined into app.min.$num_compilations.js [4] :: $tmp_js_string"
                num_compilations=$(expr $num_compilations + 1)
            fi
        fi 
        
    else
        # Less than the chunk size, so don't do concatenation yet.
        # Just add it to the queue.
        js_queue+=($tmp_js)
        (( filesize_min_total += tmp_js_filesize ))

        # If this is the last file in scripts_list.txt and we still haven't reached
        # the 25kb limit, that's fine.  Go ahead and combine the remaining files.
        last_loop=$(expr $cnt - 1)
        if (($i == $last_loop)); then
            tmp_js_string=${js_queue[*]}
            cat $tmp_js_string > "$path_to_js_compiled"/app.min.$num_compilations.js
            echo "        - Combined into app.min.$num_compilations.js [4] :: $tmp_js_string"
            num_compilations=$(expr $num_compilations + 1)
        fi
    fi    
done

# Create a js.php file in the path_to_js_compiled directory
timestamp=$(date +%s)
echo '<?php /* This file generated by js.sh */ ?>' > "$path_to_js_compiled"/js.php
for ((i=0;i<num_compilations;i++)); do
    echo "<script defer src='$web_path_to_js/app.min.$i.js?v=$timestamp'></script>" >> "$path_to_js_compiled"/js.php 
done
echo "Created js.php"

# Clean up the tmp directory
rm "$path_to_js_temp"/*
echo "Cleaned tmp directory"

#cmd /k
